## 前言
近邻算法简单、直观：给定一个训练数据集，对新的输入实例，==在训练数据集中找到与该实例最邻近的k个实例，这k个实例的多数属于某个类，就把该输入实例分为这个类==。
## 算法步骤

![5](./assets/image-20230930233300162.png)

### 距离度量

![image-20230930233401529](./assets/image-20230930233401529.png)

## k近邻法的实现：kd树（搜索`最`近邻点）

### 例子

#### 构造kd树 

$$
T= {(2, 3)T, (5,4)T, (9, 6)T, (4, 7)T, (8, 1)T, (7,2)T}
$$

选取$X_1$的中位数，$\{2,4,5,7,8,9\}$中选==较大的==$7$,故第一层节点$(7,2)$

重复 划分

重复：对深度为$j$的结点，选择为切分的坐标轴$l=j(mod k)+1$

`比如对T这种二元的，依次选择xyxyxyxyxyxy为划分中位数`

+ 画出kd树

<img src="./assets/image-20231001000807262.png" alt="image-20231001000807262" style="zoom: 50%;" />

+ 特征空间划分 蓝色：第一层 红色：第二层 绿色：第三层

<img src="./assets/image-20231001000941732.png" alt="image-20231001000941732" style="zoom:50%;" />

#### 搜素特征空间

+ 给定一个目标点，搜索其最近邻。首先找到包含目标点的叶结点；然后从该叶结点出发，依次回退到父结点；不断查找与目标点最邻近的结点，当确定不可能存在更近的结点时终止。这样搜索就被限制在空间的局部区域上，效率大为提高。
+ 包含目标点的叶结点对应包含目标点的最小超矩形区域。以此叶结点的实例点作为当前最近点。目标点的最近邻一定在以目标点为中心并通过当前最近点的超球体的内部（参阅图3.5）。然后返回当前结点的父结点，如果父结点的另一子结点的超矩形区域与超球体相交，那么在相交的区域内寻找与目标点更近的实例点。如果存在这样的点，将此点作为新的当前最近点。算法转到更上一级的父结点，继续上述过程。

+ 结束条件：1.如果父结点的另一子结点的超矩形区域与超球体不相交，2.或不存在比当前最近点更近的点，则停止搜索。

查找目标点(3,4.5)的最近邻点

<img src="./assets/image-20231001002839432.png" alt="image-20231001002839432" style="zoom:50%;" />

寻找路径(7,2)→(5,4)→(4,7)

特征控件上画圆，回溯

<img src="./assets/image-20231001003215850.png" alt="image-20231001003215850" style="zoom:67%;" />

(4,7)构成的圆无x=4相交，回溯到(5,4)，                   距离更小更新邻近点

(5,4)构成的与y=4相交，进入另一子空间找到(2,3)   距离更小更新邻近点（如果距离更大了，结束循环）

(2,3)构成的圆不与x=7相交,                                          找不到结束

结束，回到最近邻点(2,3)
